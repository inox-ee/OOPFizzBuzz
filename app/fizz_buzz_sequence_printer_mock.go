// Code generated by MockGen. DO NOT EDIT.
// Source: fizz_buzz_sequence_printer.go
//
// Generated by this command:
//
//	mockgen -source fizz_buzz_sequence_printer.go -destination fizz_buzz_sequence_printer_mock.go -package app
//

// Package app is a generated GoMock package.
package app

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNumberConverter is a mock of NumberConverter interface.
type MockNumberConverter struct {
	ctrl     *gomock.Controller
	recorder *MockNumberConverterMockRecorder
}

// MockNumberConverterMockRecorder is the mock recorder for MockNumberConverter.
type MockNumberConverterMockRecorder struct {
	mock *MockNumberConverter
}

// NewMockNumberConverter creates a new mock instance.
func NewMockNumberConverter(ctrl *gomock.Controller) *MockNumberConverter {
	mock := &MockNumberConverter{ctrl: ctrl}
	mock.recorder = &MockNumberConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNumberConverter) EXPECT() *MockNumberConverterMockRecorder {
	return m.recorder
}

// Convert mocks base method.
func (m *MockNumberConverter) Convert(number int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", number)
	ret0, _ := ret[0].(string)
	return ret0
}

// Convert indicates an expected call of Convert.
func (mr *MockNumberConverterMockRecorder) Convert(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockNumberConverter)(nil).Convert), number)
}

// MockOutputWriter is a mock of OutputWriter interface.
type MockOutputWriter struct {
	ctrl     *gomock.Controller
	recorder *MockOutputWriterMockRecorder
}

// MockOutputWriterMockRecorder is the mock recorder for MockOutputWriter.
type MockOutputWriterMockRecorder struct {
	mock *MockOutputWriter
}

// NewMockOutputWriter creates a new mock instance.
func NewMockOutputWriter(ctrl *gomock.Controller) *MockOutputWriter {
	mock := &MockOutputWriter{ctrl: ctrl}
	mock.recorder = &MockOutputWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutputWriter) EXPECT() *MockOutputWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockOutputWriter) Write(output string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", output)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockOutputWriterMockRecorder) Write(output any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockOutputWriter)(nil).Write), output)
}
